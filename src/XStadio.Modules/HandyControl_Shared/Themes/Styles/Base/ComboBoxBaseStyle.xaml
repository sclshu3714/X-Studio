<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:hc="clr-namespace:HandyControl.Controls"
    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <!--  默认下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="ComboBox">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="border"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <hc:ToggleBlock
                Grid.Column="1"
                Padding="1,0"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                Background="Transparent"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <hc:ToggleBlock.UnCheckedContent>
                    <Path
                        Width="14"
                        Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Data="{StaticResource DownGeometry}"
                        Fill="{TemplateBinding BorderBrush}"
                        Stretch="Uniform" />
                </hc:ToggleBlock.UnCheckedContent>
                <hc:ToggleBlock.CheckedContent>
                    <Path
                        Width="14"
                        Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Data="{StaticResource UpGeometry}"
                        Fill="{TemplateBinding BorderBrush}"
                        Stretch="Uniform" />
                </hc:ToggleBlock.CheckedContent>
            </hc:ToggleBlock>
            <hc:ToggleBlock
                Grid.Column="0"
                Grid.ColumnSpan="2"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                Background="Transparent"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                ToggleGesture="LeftClick" />
            <ContentPresenter
                x:Name="contentPresenter"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            <Popup
                x:Name="PART_Popup"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PlacementTarget="{Binding ElementName=border}"
                PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Decorator Margin="8,0">
                    <Border
                        x:Name="dropDownBorder"
                        MinWidth="{Binding ActualWidth, ElementName=border}"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        Margin="0,0,0,8"
                        Background="{DynamicResource RegionBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="0,1,0,0"
                        CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        Effect="{StaticResource EffectShadow2}">
                        <hc:ToggleBlock
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="2">
                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                            <hc:ToggleBlock.UnCheckedContent>
                                <hc:Empty />
                            </hc:ToggleBlock.UnCheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在顶部的下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxTopTemplate" TargetType="ComboBox">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <hc:ToggleBlock
                    Grid.Column="1"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <hc:ToggleBlock
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick" />
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    IsHitTestVisible="false"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Popup
                    x:Name="PART_Popup"
                    Margin="1"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在左侧的下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxLeftTemplate" TargetType="ComboBox">
        <Grid Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <hc:ToggleBlock
                    Grid.Column="1"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <hc:ToggleBlock
                    Grid.Column="0"
                    Grid.ColumnSpan="2"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick" />
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    IsHitTestVisible="false"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Popup
                    x:Name="PART_Popup"
                    Margin="1"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  可编辑下拉框中的输入框  -->
    <Style x:Key="ComboBoxEditableTextBox" TargetType="TextBox">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Margin="-2,0,0,0"
                        Padding="{TemplateBinding Padding}"
                        Background="Transparent"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  默认可编辑下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="ComboBox">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="border"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <hc:ToggleBlock
                Grid.Column="1"
                Padding="1,0"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                Background="Transparent"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                ToggleGesture="LeftClick">
                <hc:ToggleBlock.UnCheckedContent>
                    <Path
                        Width="14"
                        Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Data="{StaticResource DownGeometry}"
                        Fill="{TemplateBinding BorderBrush}"
                        Stretch="Uniform" />
                </hc:ToggleBlock.UnCheckedContent>
                <hc:ToggleBlock.CheckedContent>
                    <Path
                        Width="14"
                        Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Data="{StaticResource UpGeometry}"
                        Fill="{TemplateBinding BorderBrush}"
                        Stretch="Uniform" />
                </hc:ToggleBlock.CheckedContent>
            </hc:ToggleBlock>
            <TextBox
                x:Name="PART_EditableTextBox"
                Grid.Column="0"
                Padding="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                Background="{TemplateBinding Background}"
                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxEditableTextBox}" />
            <Popup
                x:Name="PART_Popup"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PlacementTarget="{Binding ElementName=border}"
                PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Decorator Margin="8,0">
                    <Border
                        x:Name="dropDownBorder"
                        MinWidth="{Binding ActualWidth, ElementName=border}"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        Margin="0,0,0,8"
                        Background="{DynamicResource RegionBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="0,1,0,0"
                        CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        Effect="{StaticResource EffectShadow2}">
                        <hc:ToggleBlock
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="2">
                                    <ItemsPresenter
                                        x:Name="ItemsPresenter"
                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                            <hc:ToggleBlock.UnCheckedContent>
                                <hc:Empty />
                            </hc:ToggleBlock.UnCheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在顶部的可编辑下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxEditableTopTemplate" TargetType="ComboBox">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="1"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在左侧的可编辑下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxEditableLeftTemplate" TargetType="ComboBox">
        <Grid Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="2"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="1"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  下拉项基样式  -->
    <Style x:Key="ComboBoxItemBaseStyle" TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Foreground" Value="White" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  下拉框基样式  -->
    <Style
        x:Key="ComboBoxBaseStyle"
        BasedOn="{StaticResource InputElementBaseStyle}"
        TargetType="ComboBox">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemBaseStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  下拉框扩展样式  -->
    <Style
        x:Key="ComboBoxExtendBaseStyle"
        BasedOn="{StaticResource ComboBoxBaseStyle}"
        TargetType="ComboBox">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTopTemplate}" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTopTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableLeftTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  标题在顶部的Handy式下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxPlusTopTemplate" TargetType="hc:ComboBox">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <hc:ToggleBlock
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick" />
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    IsHitTestVisible="false"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    Margin="1"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在左侧的Handy式下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxPlusLeftTemplate" TargetType="hc:ComboBox">
        <Grid Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <hc:ToggleBlock
                    Grid.Column="0"
                    Grid.ColumnSpan="3"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick" />
                <ContentPresenter
                    x:Name="contentPresenter"
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    IsHitTestVisible="false"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    Margin="1"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在顶部的Handy式可编辑下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxPlusEditableTopTemplate" TargetType="hc:ComboBox">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <DockPanel
                Grid.ColumnSpan="2"
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxPlusEditableTopAutoCompleteTemplate" TargetType="hc:ComboBox">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <DockPanel
                Grid.ColumnSpan="2"
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheTop), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
                <Popup
                    x:Name="PART_Popup_AutoComplete"
                    AllowsTransparency="true"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                    StaysOpen="False">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder_AutoComplete"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <StackPanel
                                            Name="PART_AutoCompletePanel"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  标题在左侧的Handy式可编辑下拉框模板  -->
    <ControlTemplate x:Key="ComboBoxPlusEditableLeftTemplate" TargetType="hc:ComboBox">
        <Grid Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxPlusEditableLeftAutoCompleteTemplate" TargetType="hc:ComboBox">
        <Grid Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel
                Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}"
                HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}"
                LastChildFill="True"
                Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}">
                <ContentPresenter
                    Margin="4,0,0,0"
                    Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}"
                    DockPanel.Dock="Right"
                    TextElement.Foreground="{DynamicResource DangerBrush}"
                    Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock
                    hc:TextBlockAttach.AutoTooltip="True"
                    Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </DockPanel>
            <Grid x:Name="contentPanel" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Border
                    x:Name="border"
                    Grid.ColumnSpan="3"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                <hc:ToggleBlock
                    Grid.Column="2"
                    Padding="1,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Background="Transparent"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    ToggleGesture="LeftClick">
                    <hc:ToggleBlock.UnCheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource DownGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.UnCheckedContent>
                    <hc:ToggleBlock.CheckedContent>
                        <Path
                            Width="14"
                            Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter='0,0,1,0'}"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{StaticResource UpGeometry}"
                            Fill="{TemplateBinding BorderBrush}"
                            Stretch="Uniform" />
                    </hc:ToggleBlock.CheckedContent>
                </hc:ToggleBlock>
                <TextBlock
                    Margin="{TemplateBinding Padding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Style="{StaticResource TextBlockDefaultThiLight}"
                    Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{TemplateBinding Text,
                                                 Converter={StaticResource String2VisibilityReConverter}}" />
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Grid.Column="0"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
                <Button
                    Name="ButtonClear"
                    Grid.Column="1"
                    Width="Auto"
                    Height="Auto"
                    Padding="0,0,2,0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    HorizontalContentAlignment="Left"
                    hc:IconElement.Geometry="{StaticResource DeleteFillCircleGeometry}"
                    hc:IconElement.Width="14"
                    Command="interactivity:ControlCommands.Clear"
                    Focusable="False"
                    Foreground="{Binding BorderBrush, ElementName=border}"
                    Style="{StaticResource ButtonIcon}"
                    Visibility="Collapsed" />
                <Popup
                    x:Name="PART_Popup"
                    AllowsTransparency="true"
                    IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
                <Popup
                    x:Name="PART_Popup_AutoComplete"
                    AllowsTransparency="true"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=border}"
                    PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <Decorator Margin="8,0">
                        <Border
                            x:Name="dropDownBorder_AutoComplete"
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            Margin="0,0,0,8"
                            Background="{DynamicResource RegionBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"
                            CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                            Effect="{StaticResource EffectShadow2}">
                            <hc:ToggleBlock
                                HorizontalContentAlignment="Stretch"
                                VerticalContentAlignment="Stretch"
                                IsChecked="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                                <hc:ToggleBlock.CheckedContent>
                                    <ScrollViewer Margin="2">
                                        <StackPanel
                                            Name="PART_AutoCompletePanel"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </hc:ToggleBlock.CheckedContent>
                                <hc:ToggleBlock.UnCheckedContent>
                                    <hc:Empty />
                                </hc:ToggleBlock.UnCheckedContent>
                            </hc:ToggleBlock>
                        </Border>
                    </Decorator>
                </Popup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MinWidth" Value="{Binding ActualWidth, ElementName=border}" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="MinWidth" Value="{Binding ActualHeight, ElementName=border}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource SecondaryBorderBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="contentPanel" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="IsMouseOver" Value="true" />
                    <Condition Property="hc:InfoElement.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="contentPanel" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Handy式下拉框样式  -->
    <Style
        x:Key="ComboBoxPlusBaseStyle"
        BasedOn="{StaticResource ComboBoxExtendBaseStyle}"
        TargetType="hc:ComboBox">
        <Setter Property="Template" Value="{StaticResource ComboBoxPlusTopTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Top" />
                    <Condition Property="AutoComplete" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopAutoCompleteTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="True" />
                    <Condition Property="hc:InfoElement.TitlePlacement" Value="Left" />
                    <Condition Property="AutoComplete" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftAutoCompleteTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
